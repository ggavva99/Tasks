<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vulnerability Report</title>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.2/papaparse.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body { font-family: Arial, sans-serif; }
        .container { max-width: 1200px; margin: auto; display: flex; flex-direction: column; }
        .row { display: flex; gap: 20px; margin-top: 20px; }
        .column { flex: 1; }
        .filter-list { margin-top: 20px; }
        .filter-item { cursor: pointer; color: blue; text-decoration: underline; margin: 5px 0; }
        table { width: 100%; border-collapse: collapse; margin-top: 10px; }
        th, td { border: 1px solid black; padding: 8px; text-align: left; }
        th { background-color: #f4f4f4; }
        .hidden { display: none; }
        h2 { text-align: center; }
        .chart-container { width: 200px; height: 200px; }

        .draggable {
        cursor: move;
        }
        .droppable {
        padding: 10px;
        border: 2px dashed #ccc;
        margin: 5px 0;
        border-radius: 8px;
        text-align: center;
        background-color: #fafafa;
        }
        .droppable.dragover {
        background-color: #cce5ff;
        }
        .top-bar {
           display: flex;
           justify-content: flex-end;
           align-items: center;
           gap: 10px;
           padding: 10px 20px;
           background-color: #f7f7f7;
           border-bottom: 1px solid #ccc;
           position: sticky;
           top: 0;
           z-index: 100;
        }

        .top-bar label {
            font-size: 14px;
        }

        .top-bar input[type="file"] {
            font-size: 12px;
        }

        .top-bar button {
           font-size: 12px;
           padding: 4px 10px;
           background-color: #4CAF50;
           color: white;
           border: none;
           border-radius: 4px;
           cursor: pointer;
        }

        .top-bar button:hover {
             background-color: #45a049;
        }

    </style>
</head>
<body>
    <div class="container">
        <h2>Vulnerability Report</h2>
        <h5 for="assignmentUpload">Load CSV File :</h5>
        <input type="file" id="csvFile" accept=".csv">
        <h5 for="assignmentUpload">Load Assignment JSON:</h5>
        <input type="file" id="assignmentUpload" accept=".json">
        <div class="top-bar">
        <button onclick="downloadAssignments()">Download Assignments</button>
        </div>

        <div class="row">
            <div class="column">
                <div id="assetOwners" class="filter-list"></div>
            </div>
            <div class="column">
                <h3>Asset Owner Risk Distribution</h3>
                <div class="chart-container">
                    <canvas id="riskPieChart"></canvas>
                </div>
            </div>
            <div class="column" id="assignListContainer">

                <h3>Assign List</h3>

                <div id="assignList" class="filter-list">

                    <div id="usersDroppable"></div>

                </div>



         <!--   <div id="assignList" class="filter-list"></div>  -->

            </div>
        </div>

        <div class="row">
            <div class="column">
                <h3 id="summaryTitle">Vulnerability Summary</h3>

                <table id="vulnerabilityTable">
                    <tr>
                        <th>Vulnerability</th>
                        <th>Risk Score</th>
                        <th>Severity Level</th>
                        <th>Count</th>
                        <th>Assign</th>
                    </tr>
                </table>
                <button id="toggleMore" class="hidden">Show More</button>
            </div>
        </div>

        <h3 id="selectedVulnerability"></h3>
        <table id="results" class="result-table"></table>
    </div>

    <script>
        const USERS = ['ramu', 'mitansh', 'mahesh', 'ganesh', 'rudra'];

        let csvData = [];
        let riskChart;
        // let assignments = JSON.parse(localStorage.getItem('assignments')) || {};
        let assignments = {};

 //       async function loadAssignments() {
 //           const res = await fetch('http://localhost:3000/assignments');
 //           assignments = await res.json();
 //           renderAssignList(); // After load
 //       }
        document.getElementById('assignmentUpload').addEventListener('change', function (e) {
             const file = e.target.files[0];
             if (!file) return;

             const reader = new FileReader();
             reader.onload = function (event) {
               try {
                  assignments = JSON.parse(event.target.result);
                  renderAssignList();
                 alert("Assignments loaded successfully.");
               } catch (err) {
                 alert("Invalid JSON file.");
               }
             };
             reader.readAsText(file);
        });


        document.getElementById('csvFile').addEventListener('change', function(event) {
            const file = event.target.files[0];
            if (!file) return;

            Papa.parse(file, {
                header: true,
                skipEmptyLines: true,
                complete: function(results) {
                    csvData = results.data.map(row => {
                        let newRow = {};
                        Object.keys(row).forEach(key => {
                            let normalizedKey = key.trim();
                            newRow[normalizedKey] = row[key].trim();
                        });

                        if (newRow['Vulnerability Title'] &&
                            (newRow['Vulnerability Title'].includes('Unbreakable Enterprise kernel-container security update') ||
                             newRow['Vulnerability Title'].includes('cups-filters security update'))) {
                            newRow['Asset Owner'] = 'Linux';
                        }

                        return newRow;
                    });
                    renderAssetOwners();
                    renderRiskChart();
                }
            });
        });


        function downloadAssignments() {
            const now = new Date();
            const yyyy = now.getFullYear();
            const mm = String(now.getMonth() + 1).padStart(2, '0');
            const dd = String(now.getDate()).padStart(2, '0');
            const hh = String(now.getHours()).padStart(2, '0');
            const min = String(now.getMinutes()).padStart(2, '0');
            const ss = String(now.getSeconds()).padStart(2, '0');

            const filename = `assignments_${yyyy}-${mm}-${dd}_${hh}-${min}-${ss}.json`;

            const blob = new Blob([JSON.stringify(assignments, null, 2)], { type: 'application/json' });
            const a = document.createElement('a');
            a.href = URL.createObjectURL(blob);
            a.download = filename;
            a.click();
            URL.revokeObjectURL(a.href);
        }

        function renderAssetOwners() {
            const owners = [...new Set(csvData.map(row => row['Asset Owner']).filter(Boolean))];
            const container = document.getElementById('assetOwners');
            container.innerHTML = '<h3>Asset Owners</h3>';
            owners.forEach(owner => {
                const div = document.createElement('div');
                div.textContent = owner;
                div.className = 'filter-item';
                div.onclick = () => renderVulnerabilityTable(owner);
                container.appendChild(div);
            });
        }

        function renderRiskChart() {
            const ownerRiskScores = {};
            csvData.forEach(row => {
                const owner = row['Asset Owner'];
                const riskScore = parseFloat(row['Vulnerability Risk Score']) || 0;
                if (owner) {
                    ownerRiskScores[owner] = (ownerRiskScores[owner] || 0) + riskScore;
                }
            });

            const owners = Object.keys(ownerRiskScores);
            const scores = Object.values(ownerRiskScores);
            const totalRisk = scores.reduce((sum, val) => sum + val, 0);
            const percentages = scores.map(score => ((score / totalRisk) * 100).toFixed(2));

            const ctx = document.getElementById('riskPieChart').getContext('2d');
            if (riskChart) riskChart.destroy();
            riskChart = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: owners,
                    datasets: [{
                        data: percentages,
                        backgroundColor: ['#ff6384', '#36a2eb', '#ffce56', '#4bc0c0', '#9966ff', '#ff9f40'],
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom',
                        }
                    }
                }
           });
        }
        let sortDescending = true;
        function severityToNumber(severity) {
              const levels = { "Critical": 4, "High": 3, "Medium": 2, "Low": 1, "Info": 0 };
              return levels[severity] || -1;
        }
        let severitySortDescending = true;
        let sortBy = 'risk';

        function renderVulnerabilityTable(owner) {

            document.getElementById('summaryTitle').textContent = `Vulnerability Summary: ${owner}`;
            const vulnerabilities = [...new Set(csvData.filter(row => row['Asset Owner'] === owner).map(row => row['Vulnerability Title']).filter(Boolean))];
            const table = document.getElementById('vulnerabilityTable');
            table.innerHTML = `
                <tr>
                    <th>Vulnerability</th>
                    <th id="sortRiskScore" style="cursor: pointer;">Risk Score ${sortDescending ? '⬇️' : '⬆️'}</th>
                    <th id="sortSeverity" style="cursor: pointer;">Severity  ${severitySortDescending ? '⬇️' : '⬆️'}</th>


                    <th>Count</th>
                    <th>Assign</th>
                </tr>`;


            let totalRiskScore = 0;
            const vulnerabilityData = {};
            vulnerabilities.forEach(title => {
                const rows = csvData.filter(row => row['Asset Owner'] === owner && row['Vulnerability Title'] === title);
                let totalRisk = 0;
                rows.forEach(row => {
                    let riskScore = parseFloat(row['Vulnerability Risk Score']) || 0;
                    totalRisk += riskScore;
                });
                totalRiskScore += totalRisk;
                vulnerabilityData[title] = { riskScore: totalRisk, count: rows.length };
                const severityLevels = rows.map(row => row['Vulnerability Severity Level']);
                const mostCommonSeverity = severityLevels.sort((a,b) =>
                      severityLevels.filter(v => v===a).length - severityLevels.filter(v => v===b).length
                ).pop();

                vulnerabilityData[title] = {
                   riskScore: totalRisk,
                   count: rows.length,
                   severity: mostCommonSeverity || 'N/A'
                };

            });

            // const sortedData = Object.entries(vulnerabilityData).sort((a, b) => {
            //      return sortDescending ? b[1].riskScore - a[1].riskScore : a[1].riskScore - b[1].riskScore;
           // });
            const sortedData = Object.entries(vulnerabilityData).sort((a, b) => {
                if (sortBy === 'risk') {
                   return sortDescending ? b[1].riskScore - a[1].riskScore : a[1].riskScore - b[1].riskScore;
                } else if (sortBy === 'severity') {
                     const valA = parseFloat(a[1].severity) || 0;
                     const valB = parseFloat(b[1].severity) || 0;
                     return severitySortDescending ? valB - valA : valA - valB;
                }
            });

            const toggleButton = document.getElementById('toggleMore');



            sortedData.forEach(([title, data], index) => {
               const tr = document.createElement('tr');
               tr.className = index >= 5 ? 'hidden extra-rows' : '';
               tr.draggable = true;
               tr.ondragstart = (e) => e.dataTransfer.setData('text/plain', title);
               tr.classList.add('draggable');
               tr.className = index >= 5 ? 'hidden extra-rows' : '';
               tr.innerHTML = `<td class="filter-item" onclick="renderResults('${owner}', '${title}')">${title}</td>
                                <td>${data.riskScore.toFixed(2)}</td>
                                <td>${data.severity}</td>
                                <td>${data.count}</td>
                                <td>
                                   <select onchange="assignEmail('${title}', this.value)">
                                     <option value="">-- Select User --</option>
                                     ${USERS.map(user => `
                                       <option value="${user}" ${assignments[title] === user ? 'selected' : ''}>${user}</option>
                                     `).join('')}
                                   </select>
                                </td>
               `;
               table.appendChild(tr);
            });
            const totalRow = document.createElement('tr');
            totalRow.innerHTML = `<td><strong>Total Risk Score</strong></td>
                                  <td><strong>${totalRiskScore.toFixed(2)}</strong></td>
                                  <td></td>`;
            table.appendChild(totalRow);

            toggleButton.classList.toggle('hidden', sortedData.length <= 5);
            toggleButton.textContent = 'Show More';
            toggleButton.onclick = function () {
                document.querySelectorAll('.extra-rows').forEach(row => row.classList.toggle('hidden'));
                toggleButton.textContent = toggleButton.textContent === 'Show More' ? 'Show Less' : 'Show More';
            };

            // Enable sorting when header clicked
            document.getElementById('sortRiskScore').onclick = () => {
               sortDescending = !sortDescending;
               sortBy = 'risk';
               renderVulnerabilityTable(owner);
            };
            document.getElementById('sortSeverity').onclick = () => {
                severitySortDescending = !severitySortDescending;
                sortBy = 'severity';
                renderVulnerabilityTable(owner);
            };




         }







        function renderAssignList() {


           const assignContainer = document.getElementById('usersDroppable');
           assignContainer.innerHTML = '';




           // Optional: show already assigned users with mail icons
          const assignList = document.getElementById('assignList');
          // 🧹 Clear previous user assignment list to prevent duplicates
          const oldUserEntries = assignList.querySelectorAll('.filter-item');
          oldUserEntries.forEach(el => el.remove());
          const uniqueAssignments = [...new Set(Object.values(assignments).filter(Boolean))];
          uniqueAssignments.forEach(email => {
             const div = document.createElement('div');
             div.className = 'filter-item';

             const nameSpan = document.createElement('span');
             nameSpan.textContent = email;
             nameSpan.onclick = () => displayAssignedVulnerabilities(email);

             const mailIcon = document.createElement('span');
             mailIcon.textContent = ' ✉️';
             mailIcon.style.cursor = 'pointer';
             mailIcon.style.marginLeft = '10px';
             mailIcon.onclick = (event) => {
               event.stopPropagation();
               sendMail(email);
             };

             div.appendChild(nameSpan);
             div.appendChild(mailIcon);
             assignList.appendChild(div);
          });
        }
        // Display vulnerabilities for selected assign
        function displayAssignedVulnerabilities(email) {
           let assignedVulnerabilities = Object.keys(assignments)
             .filter(vuln => assignments[vuln] === email);

           const resultsTable = document.getElementById('results');
           resultsTable.innerHTML = '<tr><th>Vulnerability</th></tr>';

           assignedVulnerabilities.forEach((vuln, index) => {
              const row = resultsTable.insertRow();
              row.className = index >= 3 ? 'hidden extra-rows' : ''; // Hide rows beyond the first 3
              const cell = row.insertCell(0);
              cell.textContent = vuln;
           });
           const titleElement = document.getElementById('selectedVulnerability');
           titleElement.textContent = `Assigned Vulnerabilities for ${email}`;

           // Add Show More / Show Less button
           let toggleButton = document.getElementById('toggleMoreAssigned');
           if (!toggleButton) {
                toggleButton = document.createElement('button');
                toggleButton.id = 'toggleMoreAssigned';
                toggleButton.textContent = 'Show More';
                toggleButton.onclick = function () {
                   document.querySelectorAll('.extra-rows').forEach(row => row.classList.toggle('hidden'));
                   toggleButton.textContent = toggleButton.textContent === 'Show More' ? 'Show Less' : 'Show More';
                };
                resultsTable.parentNode.appendChild(toggleButton);
           }
           toggleButton.classList.toggle('hidden', assignedVulnerabilities.length <= 3);
           toggleButton.textContent = 'Show More';

           setTimeout(() => {
               titleElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
           }, 200);

        }

        function renderAssignedVulnerabilities(email) {
            document.getElementById('summaryTitle').textContent = `Assigned Vulnerabilities: ${email}`;
            const table = document.getElementById('vulnerabilityTable');
            table.innerHTML = `
                <tr>
                    <th>Vulnerability</th>
                    <th>Risk Score</th>
                    <th>Count</th>
                </tr>`;

            const assignedVulnerabilities = Object.keys(assignments).filter(vuln => assignments[vuln] === email);
            assignedVulnerabilities.forEach(title => {
                const rows = csvData.filter(row => row['Vulnerability Title'] === title);
                let totalRisk = rows.reduce((sum, row) => sum + (parseFloat(row['Vulnerability Risk Score']) || 0), 0);

                const tr = document.createElement('tr');
                tr.innerHTML = `<td>${title}</td>
                                <td>${totalRisk.toFixed(2)}</td>
                                <td>${rows.length}</td>`;
                table.appendChild(tr);
            });
        }



        // Send email for specific assign
        function sendMail(email) {
            let assignedVulnerabilities = Object.keys(assignments)
               .filter(vuln => assignments[vuln] === email);

            if (assignedVulnerabilities.length === 0) {
               alert(`No vulnerabilities assigned to ${email}`);
               return;
            }

            let emailBody = `Hello ${email},\n\nYou have been assigned the following vulnerabilities:\n\n`;
            assignedVulnerabilities.forEach(vuln => {
               emailBody += `- ${vuln}\n`;
            });
            emailBody += "\nPlease review and take necessary action.\n\nBest Regards,\nSecurity Team";

            const mailToLink = `mailto:${email}?subject=Vulnerability Assignment&body=${encodeURIComponent(emailBody)}`;
            window.open(mailToLink, '_blank');
        }

        // document.addEventListener('DOMContentLoaded', () => {
            // loadAssignments();
            renderAssignList();
        // });

        async function assignEmail(title, email) {
            if (email) {
                assignments[title] = email;
            } else {
                delete assignments[title];
            }
            await fetch('http://localhost:3000/assignments', {
               method: 'POST',
               headers: { 'Content-Type': 'application/json' },
               body: JSON.stringify(assignments)
            });
            // localStorage.setItem('assignments', JSON.stringify(assignments));
            //async function saveAssignments() {
            //      await fetch('http://localhost:3000/assignments', {
            //         method: 'POST',
            //          headers: { 'Content-Type': 'application/json' },
            //         body: JSON.stringify(assignments)
            //      });
            //}

            renderAssignList();
        }


        function renderResults(owner, title) {
               const filteredData = csvData.filter(row => row['Asset Owner'] === owner && row['Vulnerability Title'] === title);
               document.getElementById('selectedVulnerability').textContent = `Vulnerability: ${title}`;
               const table = document.getElementById('results');
               table.innerHTML = `
                <tr>
                    <th>Hostname</th>
                    <th>IP Address</th>
                    <th>OS Name</th>
                    <th>OS Version</th>
                    <th>Severity Level</th>
                    <th>Vulnerability Age</th>
                    <th>Vulnerability Proof</th>
                    <th>Service Port</th>
                    <th>Custom Tag</th>
                </tr>`;

        filteredData.forEach((row, index) => {
               const tr = document.createElement('tr');

               // Truncate proof if too long
               const proof = row['Vulnerability Proof'] || 'N/A';
               const MAX_LENGTH = 10;

               let proofHTML = '';
               if (proof.length > MAX_LENGTH) {
                   const shortProof = proof.slice(0, MAX_LENGTH);
                   proofHTML = `
                      <span class="short-proof" id="short-${index}">${shortProof}...</span>
                      <span class="full-proof hidden" id="full-${index}">${proof}</span>
                      <a href="javascript:void(0)" onclick="toggleProof(${index})" id="toggle-link-${index}">Show More</a>
                   `;
               } else {
               proofHTML = proof;
               }

               tr.innerHTML = `
                    <td>${row['Asset Names'] || 'N/A'}</td>
                    <td>${row['Asset IP Address'] || 'N/A'}</td>
                    <td>${row['Asset OS Name'] || 'N/A'}</td>
                    <td>${row['Asset OS Version'] || 'N/A'}</td>
                    <td>${row['Vulnerability Severity Level'] || 'N/A'}</td>

                    <td>${row['Vulnerability Age'] || 'N/A'}</td>
                    <td>${proofHTML}</td>
                    <td>${row['Service Port'] || 'N/A'}</td>
                    <td>${row['Custom Tag'] || 'N/A'}</td>`;
               table.appendChild(tr);
        });
        setTimeout(() => {
                const selectedVulnerabilityElement = document.getElementById('selectedVulnerability');
                selectedVulnerabilityElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }, 200);



        }

        function toggleProof(index) {
           const shortEl = document.getElementById(`short-${index}`);
           const fullEl = document.getElementById(`full-${index}`);
           const toggleLink = document.getElementById(`toggle-link-${index}`);

           if (shortEl.classList.contains('hidden')) {
              shortEl.classList.remove('hidden');
              fullEl.classList.add('hidden');
              toggleLink.textContent = 'Show More';
           } else {
              shortEl.classList.add('hidden');
              fullEl.classList.remove('hidden');
              toggleLink.textContent = 'Show Less';
           }
        }



    </script>
</body>
</html>
